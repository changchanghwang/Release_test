name: Auto Release Note Generator

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  create-release:
    if: github.event.pull_request.merged == true && (github.event.pull_request.base.ref == 'main')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate ISO timestamp
        id: timestamp
        run: echo "ISO_TIME=$(TZ='Asia/Seoul' date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_OUTPUT

      - name: Create Release Note Body
        id: release_body
        run: |
          # PR 정보 추출
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          PR_BODY="${{ github.event.pull_request.body }}"

          # 릴리즈 노트 본문 생성
          RELEASE_BODY="## PR Information

          **PR Link**: $PR_URL
          **PR Title**: $PR_TITLE
          **Author**: @$PR_AUTHOR
          **Merged at**: ${{ steps.timestamp.outputs.ISO_TIME }}

          ## PR Description

          $PR_BODY

          ---

          *This release was automatically generated from PR #$PR_NUMBER*"

          # 멀티라인 출력을 위한 처리
          echo "RELEASE_BODY<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate tag name
        id: tag
        run: |
          TAG_NAME="v$(TZ='Asia/Seoul' date +"%Y.%m.%d.%H.%M.%S")"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Create Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ steps.tag.outputs.TAG_NAME }}" \
            --title "${{ steps.timestamp.outputs.ISO_TIME }}" \
            --notes "${{ steps.release_body.outputs.RELEASE_BODY }}" \
            --target ${{ github.sha }}
